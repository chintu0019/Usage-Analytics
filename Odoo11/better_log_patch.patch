diff -ru odoo.orig/api.py odoo/api.py
--- odoo.orig/api.py	2019-03-06 13:43:30.524291618 +0000
+++ odoo/api.py	2019-03-06 13:53:26.354306332 +0000
@@ -664,11 +664,15 @@
     return decorator(func) if not hasattr(func, '_api') else func
 
 
+def get_user_id(obj):
+    if hasattr(obj, "env") and hasattr(obj.env, "uid"):
+        return obj.env.uid
+    return -1
 
 def call_kw_model(method, self, args, kwargs):
     context, args, kwargs = split_context(method, args, kwargs)
     recs = self.with_context(context or {})
-    _logger.debug("call %s.%s(%s)", recs, method.__name__, Params(args, kwargs))
+    _logger.debug("User %s calls %s.%s(%s)", get_user_id(self), recs, method.__name__, Params(args, kwargs))
     result = method(recs, *args, **kwargs)
     return downgrade(method, result, recs, args, kwargs)
 
@@ -676,7 +680,7 @@
     ids, args = args[0], args[1:]
     context, args, kwargs = split_context(method, args, kwargs)
     recs = self.with_context(context or {}).browse(ids)
-    _logger.debug("call %s.%s(%s)", recs, method.__name__, Params(args, kwargs))
+    _logger.debug("User %s calls %s.%s(%s)", get_user_id(self), recs, method.__name__, Params(args, kwargs))
     result = method(recs, *args, **kwargs)
     return downgrade(method, result, recs, args, kwargs)
 
diff -ru odoo.orig/http.py odoo/http.py
--- odoo.orig/http.py	2019-03-06 13:43:30.530958285 +0000
+++ odoo/http.py	2019-03-06 14:15:38.221005948 +0000
@@ -310,6 +310,7 @@
         raise pycompat.reraise(type(exception), exception, sys.exc_info()[2])
 
     def _call_function(self, *args, **kwargs):
+        _logger.debug("User: %s Remote addr: %s", self.uid, self.httprequest.remote_addr)
         request = self
         if self.endpoint.routing['type'] != self._request_type:
             msg = "%s, %s: Function declared as capable of handling request of type '%s' but called with a request of type '%s'"
diff -ru odoo.orig/service/server.py odoo/service/server.py
--- odoo.orig/service/server.py	2019-03-06 13:43:30.517624952 +0000
+++ odoo/service/server.py	2019-03-06 13:54:12.580974140 +0000
@@ -227,7 +227,6 @@
         while True:
             time.sleep(SLEEP_INTERVAL + number)     # Steve Reich timing style
             registries = odoo.modules.registry.Registry.registries
-            _logger.debug('cron%d polling for jobs', number)
             for db_name, registry in registries.items():
                 if registry.ready:
                     try:
@@ -823,7 +822,6 @@
     def process_work(self):
         rpc_request = logging.getLogger('odoo.netsvc.rpc.request')
         rpc_request_flag = rpc_request.isEnabledFor(logging.DEBUG)
-        _logger.debug("WorkerCron (%s) polling for jobs", self.pid)
         db_names = self._db_list()
         if len(db_names):
             self.db_index = (self.db_index + 1) % len(db_names)
