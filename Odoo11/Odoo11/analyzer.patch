diff -x '*.pyc' -x '*.cvs' -Nru odoo.orig/api.py odoo/api.py
--- odoo.orig/api.py	2019-01-26 05:51:12.000000000 +0000
+++ odoo/api.py	2019-03-13 12:21:33.309847748 +0000
@@ -57,6 +57,10 @@
 
 from odoo.tools import frozendict, classproperty
 
+from functools import partial
+from odoo.tools import config
+import odoo.cvs_writer as cw
+
 _logger = logging.getLogger(__name__)
 
 # The following attributes are used, and reflected on wrapping methods:
@@ -664,22 +668,158 @@
     return decorator(func) if not hasattr(func, '_api') else func
 
 
+def get_user_id(obj):
+    if hasattr(obj, "env") and hasattr(obj.env, "uid"):
+        return obj.env.uid
+    return -1
+
+def cvs_write(user_id, method_name, recs, params, ids = None):
+    # multi have ids, models do not
+    cvsw = cw.CvsWriter(config.misc['cvs']['location'])
+    recs_name = method_name + '.' + recs._name
+    writer = cvs_write.dispatch.get(recs_name, None)
+    if writer != None:
+        writer(cvsw, user_id, method_name, recs, params, ids)
+cvs_write.dispatch = {}
+
+def just_log_it_loudly(cvsw, user_id, method_name, recs, params, ids):
+    _logger.debug("LOUDLY! -- User: %s, call method: %s, recs: %s, ids: %s, params: %s", user_id, method_name, recs, ids, params)
+
+
+def create_stage(cvsw, user_id, method_name, recs, params, _):
+    cvsw.write({
+        'actionName': "Create Stage",
+        'userId': user_id,
+        'id': params.args[0],
+    })
+cvs_write.dispatch['name_create.note.stage'] = create_stage
+
+
+def first_id_action(action, cvsw, user_id, method_name, recs, params, ids):
+    cvsw.write({
+        'actionName': action,
+        'userId': user_id,
+        'id': ids[0],
+    })
+cvs_write.dispatch['unlink.note.stage'] = partial(first_id_action, "Delete Stage")
+
+
+def rename_stage(cvsw, user_id, method_name, recs, params, ids):
+    cvsw.write({
+        'actionName': "Rename Stage",
+        'userId': user_id,
+        'id': ids[0],
+        'text': params.args[0]['name'],
+    })
+cvs_write.dispatch['write.note.stage'] = rename_stage
+
+
+def search(cvsw, user_id, method_name, recs, params, _):
+    try:
+        text = params.kwargs['domain'][0][2]
+    except IndexError:
+        return
+
+    cvsw.write({
+        'actionName': 'Search',
+        'userId': user_id,
+        'text': text,
+    })
+cvs_write.dispatch['read_group.note.note'] = search
+
+
+def create_note(cvsw, user_id, method_name, recs, params, _):
+    cvsw.write({
+        'actionName': 'Create Note',
+        'userId': user_id,
+        'id': params.args[0]['tag_ids'][0][0],
+        'text': params.args[0]['memo'],
+    })
+cvs_write.dispatch['create.note.note'] = create_note
+
+cvs_write.dispatch['unlink.note.note'] = partial(first_id_action, "Delete Note")
+cvs_write.dispatch['read.note.stage'] = partial(first_id_action, "Open Note")
+
+
+def write_note_note(cvsw, user_id, method_name, recs, params, ids):
+    try:
+        memo = params.args[0]['memo']
+        cvsw.write({
+            'actionName': 'Edit Note',
+            'userId': user_id,
+            'id': ids[0],
+            'text': memo,
+        })
+        return
+
+    except KeyError:
+        pass
+
+    try:
+        stage_id = params.args[0]['stage_id']
+        if write_note_note.user_moving.get(user_id, None) == stage_id:
+            del write_note_note.user_moving[user_id]
+            actionName = 'Move Note'
+        else:
+            actionName = 'Drag and Drop note'
+        cvsw.write({
+            'actionName': actionName,
+            'userId': user_id,
+            'id': ids[0],
+            'stageId': stage_id,
+        })
+        return
+
+    except KeyError:
+        pass
+write_note_note.user_moving = {}
+cvs_write.dispatch['write.note.note'] = write_note_note
+
+
+def move_note_step1(cvsw, user_id, method_name, recs, params, ids):
+    if type(ids) == int: write_note_note.user_moving[user_id] = ids
+cvs_write.dispatch['name_get.note.stage'] = move_note_step1
+
+
+def open_note_commenting(cvsw, user_id, method_name, recs, params, ids):
+    cvsw.write({
+        'actionName': 'Open commenting in note',
+        'userId': user_id,
+        'id': ids[0],
+    })
+cvs_write.dispatch['message_get_suggested_recipients.note.note'] = open_note_commenting
+
+
+def comment_in_note(cvsw, user_id, method_name, recs, params, ids):
+    to_write = { 'userId': user_id, }
+    if len(params.kwargs['attachment_ids']) == 0:
+        to_write['actionName'] = 'Comment in Note'
+    else:
+        to_write['actionName'] = 'Attach file'
+    to_write['text'] = params.kwargs['body']
+    cvsw.write(to_write)
+cvs_write.dispatch['message_post.note.note'] = comment_in_note
+
 
 def call_kw_model(method, self, args, kwargs):
     context, args, kwargs = split_context(method, args, kwargs)
     recs = self.with_context(context or {})
-    _logger.debug("call %s.%s(%s)", recs, method.__name__, Params(args, kwargs))
+    _logger.debug("(Model) ++ User: %s, call method: %s, recs: %s, params: %s", get_user_id(self), method.__name__, recs, Params(args, kwargs))
+    cvs_write(get_user_id(self), method.__name__, recs, Params(args, kwargs))
     result = method(recs, *args, **kwargs)
     return downgrade(method, result, recs, args, kwargs)
 
+
 def call_kw_multi(method, self, args, kwargs):
     ids, args = args[0], args[1:]
     context, args, kwargs = split_context(method, args, kwargs)
     recs = self.with_context(context or {}).browse(ids)
-    _logger.debug("call %s.%s(%s)", recs, method.__name__, Params(args, kwargs))
+    _logger.debug("(Multi) ++ User: %s, call method: %s, recs: %s, ids: %s, params: %s", get_user_id(self), method.__name__, recs, ids, Params(args, kwargs))
+    cvs_write(get_user_id(self), method.__name__, recs, Params(args, kwargs), ids)
     result = method(recs, *args, **kwargs)
     return downgrade(method, result, recs, args, kwargs)
 
+
 def call_kw(model, name, args, kwargs):
     """ Invoke the given method ``name`` on the recordset ``model``. """
     method = getattr(type(model), name)
diff -x '*.pyc' -x '*.cvs' -Nru odoo.orig/cvs_writer.py odoo/cvs_writer.py
--- odoo.orig/cvs_writer.py	1970-01-01 01:00:00.000000000 +0100
+++ odoo/cvs_writer.py	2019-03-13 11:21:46.179827785 +0000
@@ -0,0 +1,53 @@
+#!/usr/bin/env python3
+
+import csv
+from datetime import datetime
+import os
+import threading
+
+class CvsWriter:
+    writers = {}
+
+    def __init__(self, filename, column_names_tuple = None):
+        if column_names_tuple == None:
+            self._recover(filename)
+        else:
+            self._first_init(filename, column_names_tuple)
+
+    def _recover(self, filename):
+        self.__dict__ = CvsWriter.writers[filename]
+
+    def _first_init(self, filename, column_names_tuple):
+        CvsWriter.writers[filename] = CvsWriter.writers.get(filename, {})
+        self.__dict__ = CvsWriter.writers[filename]
+
+        self.write_lock = threading.Lock()
+        self.column_names = {}
+        self.filename = os.path.abspath(filename)
+        self.id_to_ip = {}
+
+        label_row = []
+        for idx, column_name in enumerate(column_names_tuple):
+            self.column_names[column_name] = idx
+            label_row.append(column_name)
+
+        with self.write_lock, open(self.filename, 'w') as f:
+            csv.writer(f).writerow(label_row)
+
+    def connect_id_to_ip(self, userId, userIp):
+        with self.write_lock:
+            self.id_to_ip[userId] = userIp
+
+    def write(self, elements_dict):
+        with self.write_lock, open(self.filename, 'a') as f:
+            if 'userId' in elements_dict and not 'ipAddr' in elements_dict:
+                elements_dict['ipAddr'] = self.id_to_ip.get(elements_dict['userId'], '')
+            if not 'timestamp' in elements_dict:
+                elements_dict['timestamp'] = datetime.now()
+
+            row = ['']*len(self.column_names)
+
+            for column_name, value in elements_dict.items():
+                row[ self.column_names[column_name] ] = str(value)
+
+            csv.writer(f).writerow(row)
diff -x '*.pyc' -x '*.cvs' -Nru odoo.orig/http.py odoo/http.py
--- odoo.orig/http.py	2018-11-23 05:55:29.000000000 +0000
+++ odoo/http.py	2019-03-13 11:21:46.179827785 +0000
@@ -51,6 +51,9 @@
 
 from .modules.module import module_manifest
 
+from odoo.tools import config
+import odoo.cvs_writer as cw
+
 _logger = logging.getLogger(__name__)
 rpc_request = logging.getLogger(__name__ + '.rpc.request')
 rpc_response = logging.getLogger(__name__ + '.rpc.response')
@@ -310,6 +313,10 @@
         raise pycompat.reraise(type(exception), exception, sys.exc_info()[2])
 
     def _call_function(self, *args, **kwargs):
+        _logger.debug("User: %s Remote addr: %s", self.uid, self.httprequest.remote_addr)
+        cvsw = cw.CvsWriter (config.misc['cvs']['location'])
+        cvsw.connect_id_to_ip(self.uid, self.httprequest.remote_addr)
+
         request = self
         if self.endpoint.routing['type'] != self._request_type:
             msg = "%s, %s: Function declared as capable of handling request of type '%s' but called with a request of type '%s'"
diff -x '*.pyc' -x '*.cvs' -Nru odoo.orig/service/server.py odoo/service/server.py
--- odoo.orig/service/server.py	2018-11-03 05:47:26.000000000 +0000
+++ odoo/service/server.py	2019-03-13 11:21:46.179827785 +0000
@@ -227,7 +227,6 @@
         while True:
             time.sleep(SLEEP_INTERVAL + number)     # Steve Reich timing style
             registries = odoo.modules.registry.Registry.registries
-            _logger.debug('cron%d polling for jobs', number)
             for db_name, registry in registries.items():
                 if registry.ready:
                     try:
@@ -823,7 +822,6 @@
     def process_work(self):
         rpc_request = logging.getLogger('odoo.netsvc.rpc.request')
         rpc_request_flag = rpc_request.isEnabledFor(logging.DEBUG)
-        _logger.debug("WorkerCron (%s) polling for jobs", self.pid)
         db_names = self._db_list()
         if len(db_names):
             self.db_index = (self.db_index + 1) % len(db_names)
diff -x '*.pyc' -x '*.cvs' -Nru odoo.orig/tools/config.py odoo/tools/config.py
--- odoo.orig/tools/config.py	2018-10-12 05:54:23.000000000 +0100
+++ odoo/tools/config.py	2019-03-13 11:21:46.183161169 +0000
@@ -12,6 +12,7 @@
 import sys
 import odoo
 from .. import release, conf, loglevels
+from .. import cvs_writer as cw
 from . import appdirs, pycompat
 
 from passlib.context import CryptContext
@@ -550,6 +551,15 @@
             pass
         except ConfigParser.NoSectionError:
             pass
+        cw.CvsWriter(self.misc['cvs']['location'], (
+            'timestamp',
+            'actionName',
+            'userId',
+            'ipAddr',
+            'stageId',
+            'id',
+            'text',
+        ))
 
     def save(self):
         p = ConfigParser.RawConfigParser()
