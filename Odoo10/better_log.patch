diff -ru odoo/addons/note/models/note.py odoo.pached/addons/note/models/note.py
--- odoo/addons/note/models/note.py	2017-10-10 08:37:44.000000000 +0100
+++ odoo.pached/addons/note/models/note.py	2019-03-01 12:42:15.906287662 +0000
@@ -4,6 +4,9 @@
 from odoo import api, fields, models, _
 from odoo.tools import html2plaintext
 
+import inspect
+import logging
+_logger = logging.getLogger(__name__)
 
 class Stage(models.Model):
 
@@ -38,6 +41,7 @@
     _order = 'sequence'
 
     def _get_default_stage_id(self):
+        _logger.info("%s %s User: %s", inspect.currentframe().f_back.f_code.co_name, inspect.currentframe().f_code.co_name, self.env.uid)
         return self.env['note.stage'].search([('user_id', '=', self.env.uid)], limit=1)
 
     name = fields.Text(compute='_compute_name', string='Note Summary', store=True)
@@ -56,27 +60,32 @@
     @api.depends('memo')
     def _compute_name(self):
         """ Read the first line of the memo to determine the note name """
+        _logger.info("%s %s User: %s", inspect.currentframe().f_back.f_code.co_name, inspect.currentframe().f_code.co_name, self.env.uid)
         for note in self:
             text = html2plaintext(note.memo) if note.memo else ''
             note.name = text.strip().replace('*', '').split("\n")[0]
 
     @api.multi
     def _compute_stage_id(self):
+        _logger.info("%s %s User: %s", inspect.currentframe().f_back.f_code.co_name, inspect.currentframe().f_code.co_name, self.env.uid)
         for note in self:
             for stage in note.stage_ids.filtered(lambda stage: stage.user_id == self.env.user):
                 note.stage_id = stage
 
     @api.multi
     def _inverse_stage_id(self):
+        _logger.info("%s %s User: %s", inspect.currentframe().f_back.f_code.co_name, inspect.currentframe().f_code.co_name, self.env.uid)
         for note in self.filtered('stage_id'):
             note.stage_ids = note.stage_id + note.stage_ids.filtered(lambda stage: stage.user_id != self.env.user)
 
     @api.model
     def name_create(self, name):
+        _logger.info("%s %s User: %s", inspect.currentframe().f_back.f_code.co_name, inspect.currentframe().f_code.co_name, self.env.uid)
         return self.create({'memo': name}).name_get()[0]
 
     @api.model
     def read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):
+        _logger.info("%s %s User: %s", inspect.currentframe().f_back.f_code.co_name, inspect.currentframe().f_code.co_name, self.env.uid)
         if groupby and groupby[0] == "stage_id":
             stages = self.env['note.stage'].search([('user_id', '=', self.env.uid)])
             if stages:  # if the user has some stages
@@ -123,6 +132,7 @@
     @api.multi
     def _notification_recipients(self, message, groups):
         """ All users can create a new note. """
+        _logger.info("%s %s User: %s", inspect.currentframe().f_back.f_code.co_name, inspect.currentframe().f_code.co_name, self.env.uid)
         groups = super(Note, self)._notification_recipients(message, groups)
         new_action_id = self.env['ir.model.data'].xmlid_to_res_id('note.action_note_note')
         new_action = self._notification_link_helper('new', action_id=new_action_id)
@@ -133,8 +143,10 @@
 
     @api.multi
     def action_close(self):
+        _logger.info("%s %s User: %s", inspect.currentframe().f_back.f_code.co_name, inspect.currentframe().f_code.co_name, self.env.uid)
         return self.write({'open': False, 'date_done': fields.date.today()})
 
     @api.multi
     def action_open(self):
+        _logger.info("%s %s User: %s", inspect.currentframe().f_back.f_code.co_name, inspect.currentframe().f_code.co_name, self.env.uid)
         return self.write({'open': True})
diff -ru odoo/api.py odoo.pached/api.py
--- odoo/api.py	2017-10-10 08:37:51.000000000 +0100
+++ odoo.pached/api.py	2019-03-05 10:31:03.129116882 +0000
@@ -664,11 +664,15 @@
     return decorator(func) if not hasattr(func, '_api') else func
 
 
+def get_user_id(obj):
+    if hasattr(obj, "env") and hasattr(obj.env, "uid"):
+        return obj.env.uid
+    return -1
 
 def call_kw_model(method, self, args, kwargs):
     context, args, kwargs = split_context(method, args, kwargs)
     recs = self.with_context(context or {})
-    _logger.debug("call %s.%s(%s)", recs, method.__name__, Params(args, kwargs))
+    _logger.debug("User %s calls %s.%s(%s)", get_user_id(self), recs, method.__name__, Params(args, kwargs))
     result = method(recs, *args, **kwargs)
     return downgrade(method, result, recs, args, kwargs)
 
@@ -676,7 +680,7 @@
     ids, args = args[0], args[1:]
     context, args, kwargs = split_context(method, args, kwargs)
     recs = self.with_context(context or {}).browse(ids)
-    _logger.debug("call %s.%s(%s)", recs, method.__name__, Params(args, kwargs))
+    _logger.debug("User %s calls %s.%s(%s)", get_user_id(self), recs, method.__name__, Params(args, kwargs))
     result = method(recs, *args, **kwargs)
     return downgrade(method, result, recs, args, kwargs)
 
Binary files odoo/api.pyc and odoo.pached/api.pyc differ
diff -ru odoo/http.py odoo.pached/http.py
--- odoo/http.py	2018-08-07 14:42:46.000000000 +0100
+++ odoo.pached/http.py	2019-03-05 17:09:17.742089929 +0000
@@ -303,6 +303,7 @@
 
     def _call_function(self, *args, **kwargs):
         request = self
+        _logger.debug("User: %s Remote addr: %s", self.uid, self.httprequest.remote_addr)
         if self.endpoint.routing['type'] != self._request_type:
             msg = "%s, %s: Function declared as capable of handling request of type '%s' but called with a request of type '%s'"
             params = (self.endpoint.original, self.httprequest.path, self.endpoint.routing['type'], self._request_type)
Binary files odoo/http.pyc and odoo.pached/http.pyc differ
Binary files odoo/netsvc.pyc and odoo.pached/netsvc.pyc differ
diff -ru odoo/service/server.py odoo.pached/service/server.py
--- odoo/service/server.py	2018-10-16 04:41:56.000000000 +0100
+++ odoo.pached/service/server.py	2019-03-05 10:35:15.755774458 +0000
@@ -214,7 +214,7 @@
         while True:
             time.sleep(SLEEP_INTERVAL + number)     # Steve Reich timing style
             registries = odoo.modules.registry.Registry.registries
-            _logger.debug('cron%d polling for jobs', number)
+#            _logger.debug('cron%d polling for jobs', number)
             for db_name, registry in registries.iteritems():
                 if registry.ready:
                     try:
@@ -803,7 +803,7 @@
     def process_work(self):
         rpc_request = logging.getLogger('odoo.netsvc.rpc.request')
         rpc_request_flag = rpc_request.isEnabledFor(logging.DEBUG)
-        _logger.debug("WorkerCron (%s) polling for jobs", self.pid)
+#        _logger.debug("WorkerCron (%s) polling for jobs", self.pid)
         db_names = self._db_list()
         if len(db_names):
             self.db_index = (self.db_index + 1) % len(db_names)
